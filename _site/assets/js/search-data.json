{"0": {
    "doc": "About",
    "title": "About",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com . You can find the source code for Minima at GitHub: jekyll / minima . You can find the source code for Jekyll at GitHub: jekyll / jekyll . ",
    "url": "/guiassdlc/about/",
    
    "relUrl": "/about/"
  },"1": {
    "doc": "Treinamento de código",
    "title": "Treinamento de código",
    "content": "Segurança é um trabalho de todos. Partindo dessa premissa, precisamos garantir que os nossos times estão recebendo o treinamento devido e adequado às necessidades da empresa e projetos inseridos, criando assim a conscientização necessária em todos os indivíduos. Para desenvolver softwares e aplicativos altamente seguros, independente da metodologia utilizada, devemos considerar a privacidade e definição dos requisitos de segurança, constantemente atualizados, idealmente desde o levantamento de requisitos e design do produto. Iniciando com a Modelagem de Ameaças, definição de nível mínimo aceitável de segurança, compliance, uso de criptografia, restrições de design e arquitetura, gestão de risco no uso de componentes externos/terceiros, ferramentas aprovadas e demais passos necessários para que o time tenha conhecimento dos aspectos de risco e segurança no âmbito corporativo, passando pela visão macro até chegar no nível de APIs e componentes. Atualmente, uma das formas utilizadas pelas empresas para esse tipo de programa é conhecido como “Security Champion”, visto pelo Gartner com o intuito “aprimorar a entrega e a incorporação de mensagens de segurança essenciais em organizações geograficamente e estruturalmente dispersas” visando auxiliar os líderes da gestão de segurança a “obter e manter o suporte empresarial e maximizar a eficácia do programa.” . Complementando o programa e visando uma prática deliberada de segurança em código, temos também o uso de plataformas voltadas para esse assunto, que permitem nossos times de Engenharia de Software, praticarem de maneira guiada a criação e correção de códigos, permitindo que estes profissionais tenham acesso a ambientes controlados, o mais próximo da realidade, como exemplo, a Secure Code Warrior, SecureFlag e outros. Portanto, podemos perceber que a conscientização de todos os colaboradores, técnicos ou não, inicia um excelente programa de segurança, mas não podemos deixar de passar por todas as áreas de riscos tecnológicos, privacidade, segurança de aplicações e sistemas, até chegarmos à parte prática de segurança de códigos, proporcionando uma experiência realística aos profissionais diretamente ligados à construção dos sistemas utilizados. ",
    "url": "/guiassdlc/docs/code_trainning.html",
    
    "relUrl": "/docs/code_trainning.html"
  },"2": {
    "doc": "Conscientização",
    "title": "Conscientização",
    "content": " ",
    "url": "/guiassdlc/docs/conscientizacao.html",
    
    "relUrl": "/docs/conscientizacao.html"
  },"3": {
    "doc": "Considerações Gerais",
    "title": "Considerações Gerais",
    "content": "Segurança da Informação é uma questão de negócios e ela deve ser tratada como tal. Como o próprio nome sugere, este é um guia introdutório e que pretende auxiliar os profissionais que desejam entender mais sobre o assunto, termos relacionados e precisam de material para aprofundar seus conhecimentos, vide referências, passando um pouco sobre a minha vivência no assunto e bibliografias utilizadas, desde sites até cursos feitos. Com isso em mente, acredito que inserir a segurança somente em fases pós release ou de entregas do projeto, pode ser mais custoso para o negócio, tanto para solucionar vulnerabilidades descobertas, quanto ao ter que se adaptar às mudanças ou novas necessidades que surjam, aumentando consideravelmente o retrabalho da Engenharia de Software, seja refatorando código, parando o que está fazendo, tratando débito técnico e uma série de complicadores que podem aparecer, gerando muito mais custo seja de tempo, dinheiro, energia do time, prejuízo e até possíveis fraudes. Além disso, hoje a maioria dos negócios são digitalizados e onde os nossos dados e informações são essenciais para que as empresas criem seus serviços e entreguem seus produtos de forma mais assertiva e customizado, normalmente feito através de softwares, portanto cuidar da segurança desde os dados criados, tratados ou armazenados, até a segurança do software/sistema em produção, se torna tão importante quanto o próprio desenvolvimento do sistema. Quando falamos em implementar uma esteira de desenvolvimento seguro, uma metodologia ágil de gestão de projetos, tendo o DevOps em foco e posteriormente evoluindo para o DevSecOps, onde acontece a inclusão da segurança, desde a concepção e levantamento dos requisitos, passando pelo design, sempre almejando o ganho de valor, diminuição dos gaps e riscos que o sistema possa ter e um apoio às decisões de negócio e atuação dos times de desenvolvimento. Comumente, pode haver resistência de outros times, no entendimento do valor de incluir a segurança desde o início, portanto mostrar a todos os envolvidos no projeto, que eles podem adquirir um skill de segurança e se tornar profissionais ainda mais completos, além de perceberem que os Appsecs estão atentos às necessidades e dificuldades que estes times possuem, poderão auxiliar na construção deste programa de segurança. Entretanto, mudar a maneira de olhar para o desenvolvimento de software e construção de sistemas, complexos ou não, passando pela conscientização e treinamentos, a inclusão da figura do Security Champion (papel que será desempenhado por um profissional que gosta do assunto e tenha interesse de aprender e propagar a cultura e conhecimentos dentro dos times que atua), além de auxiliar os profissionais de segurança na aplicação dos processos e tecnologias, que irão auxiliar na melhoria da segurança, são ganhos para a corporação, que podemos mensurar e trazer como destaque da implementação de uma S-SDLC. Em complemento a essa mudança/construção de cultura, podemos utilizar a modelagem de ameaças, com o uma poderosa ferramenta que trará visibilidade dos possíveis riscos e ameaças existentes naquele produto, no design e definição da topologia e tecnologia, adequação às leis, regulamentações e auditorias, além da automação auxiliando e incrementando o pentest, realizado pelo Appsec, na busca de possíveis vulnerabilidades e validação que as ameaças encontradas na modelagem de ameaças foram mitigadas ou evitadas. Ao implementar todos esses passos, treinamento e processos, naturalmente iniciamos a melhoria contínua, das pessoas e times, refletindo diretamente na qualidade e segurança dos produtos entregues, além de uma boa resposta à incidentes (indiferente da natureza destes incidentes) que ocorram durante o uso dos sistemas produtivos. Mediante o exposto, acredito que todos esses sejam pontos importantes e que devem ser considerados na criação do arcabouço de segurança de aplicações dentro da empresa (sem detrimento de nenhuma outra área da Segurança da Informação corporativa), principalmente incluir as pessoas no processo de criação, ouvir a opinião e entender a visão de todos os papéis envolvidos, desde desenvolvedores, analistas de teste, pessoal de produto e gestão, enfim, todos os interessados no sucesso da entrega, podendo então criar soluções de segurança mais abrangentes e alinhadas às necessidades da Empresa, com a participação de todos na construção e melhoria dos itens entregues. ",
    "url": "/guiassdlc/docs/considers.html",
    
    "relUrl": "/docs/considers.html"
  },"4": {
    "doc": "Melhoria Contínua",
    "title": "Melhoria Contínua",
    "content": " ",
    "url": "/guiassdlc/docs/continuous.html",
    
    "relUrl": "/docs/continuous.html"
  },"5": {
    "doc": "Design",
    "title": "Design",
    "content": "Após o levantamento de requisitos funcionais e não funcionais, teremos as arquiteturas propostas, topologias idealizadas e os fluxos sumariamente desenhados, desencadeando uma das principais fases e atividades da Esteira de Desenvolvimento Seguro, que é a criação da Modelagem de Ameaças (Threat Modeling), “uma análise das representações do sistema destacando as principais preocupações de segurança e privacidade”, conforme visto na definição desse elemento em seu manifesto. Um ponto que deve ser destacado nessa fase, é que a modelagem pretende iniciar o reconhecimento de itens que podem dar errado na construção do sistema, auxiliando o time de Engenharia, sem se tornar empecilho ou elencar vulnerabilidades, pois, um dos seus valores é a “cultura de buscar e corrigir itens de design sob o olhar de compliance” e principalmente fomentar “a colaboração das pessoas, acima de processos, metodologias e ferramentas”. Com isso posto, a dúvida natural que pode surgir é “como fazemos uma modelagem” e o que posso utilizar para me auxiliar nesse processo? . A partir desse questionamento, costumamos buscar ferramentas ou frameworks que possam auxiliar nessa tarefa, o que atualmente não é um problema, pois temos diversos projetos ou propostas para sanar esta dor, como o “modelos avaliação de riscos DREAD e STRIDE” ou o projeto da OWASP chamado “Threat Dragon”, entre muitos outros existentes. STRIDE é um mnemônico para um conjunto de Ameaças, que podem ser violadas e materializar o risco apontado durante esse processo. Spoofing, se preocupa com a Autenticação, Tampering, com a integridade da informação, Repudiation, em identificar quem realizou a ação (não-repúdio), Information Disclosure, em manter a confidencialidade, Denial of Service (DoS), como o nome sugere, tem a preocupação em manter a disponibilidade do sistema e por último, mas não menos importante, o Elevation of Privilege, em manter a autorização correta aos recursos. Além desse, todos os outros modelos e frameworks, possuem tipos de ameaças como foco e busca evitar suas violações, o que nos permite utilizar mais de um modelo durante o nosso processo de modelagem, constrói um embasamento mais eficaz sobre o escopo analisado, auxilia na definição e uso de padrões de criptografia, anonimização dos dados, atendimento às leis e regulamentações e nos riscos de segurança ao utilizar componentes de terceiros. Portanto, não importa qual seja o método utilizado, teremos que nos preocupar com alguns aspectos básicos e ter as premissas atendidas, para que possamos realizar a modelagem da melhor maneira e com a maior assertividade possível. Como premissa entendemos que precisamos do desenho da arquitetura e fluxos propostos pelas áreas de negócio e engenharia de software, pois em cima desses documentos realizamos as nossas análises e evitamos interpretações erradas do nosso entendimento; sempre que possível receber da forma mais detalhada possível todos os endpoints utilizados no fluxo, facilitando a identificação das superfícies existentes no sistema; e sempre que possível, participar das reuniões durante a construção dos sistemas ou posteriormente ter uma conversa de alinhamento para melhorar o entendimento do ambiente, tanto com a visão de produto como a visão técnica dos engenheiros de software. Dessa forma, conseguiremos desenhar os possíveis riscos de segurança, compliance e governança, que possam existir no sistema proposto, antecipando assim que estes venham acontecer e posteriormente se materializar, o que economiza tempo e energia na construção de sistemas mais robustos e seguros. ",
    "url": "/guiassdlc/docs/design.html",
    
    "relUrl": "/docs/design.html"
  },"6": {
    "doc": "Dicionário de Termos",
    "title": "Dicionário de Termos",
    "content": "Agile – Desenvolvimento Ágil de Software ou Método ágil é um conjunto de comportamentos, processos, práticas e ferramentas utilizados para a criação de produtos. Ameaça – Qualquer coisa que possa explorar uma vulnerabilidade, intencional ou acidentalmente, e obter, danificar ou destruir um ativo. Appsec – Application Security Engineer, nome dado ao profissional encarregado por cuidar da segurança das aplicações durante seu ciclo de vida e normalmente o ponto focal dos times, para assuntos relacionados à Segurança da Informação, em Geral. Benchmark – é o ato de comparar de forma eficiente a performance entre dispositivos utilizando um ou mais programas. Também pode ser usado para comparar o que é feito dentro da empresa que está atuando em relação aos competidores. Compliance – Conformidade na tradução literal, área (ou matéria) que busca manter ou ajustar os sistemas e processos, em conformidade com as normas, leis, regulamentos e diretrizes internas das companhias. DevOps – é uma abordagem de cultura, automação e design de plataforma que tem como objetivo agregar mais valor aos negócios e aumentar sua capacidade de resposta às mudanças por meio de entregas de serviços rápidas e de alta qualidade. - https://red.ht/3qOIGSG . DevSecOps – significa pensar na segurança da aplicação e da infraestrutura desde o início. Também significa automatizar algumas barreiras de segurança para evitar que o fluxo de trabalho de DevOps fique lento. - https://red.ht/3qMs4er . Features – funcionalidades ou recursos desenvolvidos por um (ou mais) time de pessoas, que (normalmente) tem como objetivo entregar mais valor e uma nova experiência ao usuário. Framework – trata-se de uma série de bibliotecas e classes — ou seja, códigos prontos — que oferecem alguma funcionalidade específica. Em outras palavras, é um padrão que pode ser incorporado a sistemas para agilizar a codificação de certas partes. - https://bit.ly/3DyJK0I . Gartner – empresa que oferece uma visão prática e objetiva para executivos e suas equipes, normalmente é utilizado para benchmark e base de referência para as ações que estão sendo realizadas dentro da companhia. - https://www.gartner.com/ . SDLC – é uma estrutura seguida por uma equipe de desenvolvimento dentro da organização de software. Consiste em um plano detalhado que descreve como desenvolver, manter e substituir software específico. S-SDLC – A diferença entre SSDLC e SDLC é que a palavra Secure, de Segurança, antes do Ciclo de Desenvolvimento, não somente inclui o time de segurança, e sim prevê as necessidades de segurança que uma aplicação necessita. - https://bit.ly/3wURHKS . Security by Design – Significa pensar em segurança desde o escopo de desenvolvimento de um novo software, prevendo toda possibilidade de riscos aos quais aquela aplicação pode estar sujeita. - https://bit.ly/3CkMlty . Security by Default – Seguro por padrão é sobre uma abordagem holística para resolver problemas de segurança na causa raiz, em vez de tratar os sintomas. - https://www.ncsc.gov.uk/information/secure-default . Vulnerabilidade – Fraquezas ou bug em um programa de segurança que podem ser exploradas por ameaças para obter acesso não autorizado a um ativo. Waterfall – Cascata na tradução literal, é um conceito tradicional de organização de projetos; como numa cascata, ele leva em consideração as fases em ordem cronológica, de forma sequencial, longo planejamento, normalmente com custos, escopo e cronograma fixos. ",
    "url": "/guiassdlc/docs/dictionary.html",
    
    "relUrl": "/docs/dictionary.html"
  },"7": {
    "doc": "Implementação",
    "title": "Implementação",
    "content": "Nessa próxima etapa da esteira, nós começamos implementar ferramentas e processos que possam automatizar os testes necessários para garantir que todos os levantamentos das fases anteriores foram atendidos e que possíveis riscos e vulnerabilidades, sejam identificados antes mesmo do software se transformar em um produto funcional e entrar em produção. É aqui que vamos realizar nossas análises de código, nos preocupar em escolher e implementar uma ferramenta para gerenciar os riscos de segurança ao utilizar componentes de terceiros, também conhecido pela sigla SCA (Software Components Analysis), outra para realizar os testes de análise estática de segurança, conhecido pela sigla SAST (Static Analysis Security Testing) e uma para realizar os testes de análise dinâmica de segurança, conhecido pela sigla DAST (Dynamic Analysis Security Testing). Muito mais do que definir as ferramentas a serem utilizadas, precisamos ter em mente que é nesta fase que precisamos da conscientização dos times em adotar esses processos, ter uma cultura de segurança é muito mais difícil e abrangente do que adotar ferramentas, pois se os times não as utilizarem ou burlarem o processo para que as análises não aconteçam, de nada vai adiantar investir recursos para ter essas ferramentas, sejam elas pagas ou não. Ter em mente que hoje a maioria dos projetos de software são construídos utilizando componentes de terceiros (bibliotecas comerciais ou open source), possuir uma lista de ferramentas e softwares aprovados, que possam ser utilizados na construção desses sistemas é tão ou mais importante que a ferramenta em si. Como referência, sem posição ou inclinação nessa escolha, temos diversos fabricantes, ferramentas e projetos que buscam resolver essa dor e permitir que criemos escala em nosso processo, dentre elas e não se limitando, estão o Fortify, Acunetix, w3af, OWASP ZAP, BurpSuite, WebInspect, entre outros. Vale ressaltar que os testes de Segurança de Aplicações não se limitam aos citados neste tópico, temos também o RASP (Runtime Application Self-Protection), IAST (Interactive Application Security Testing) e MAST (Mobile Application Security Testing), podemos enxergar estes como uma evolução e complemento dos anteriores, sendo possível tirar o melhor dessas combinações conforme a maturidade do ambiente evolui e permite que a adoção de processos e ferramentas aconteçam com o intuito de trazer mais valor ao negócio e não somente como forma de aumentar os processos e não conseguir extrair o máximo de cada teste implementado. Quanto mais maduro for nosso processo de entrega contínua de software, melhor será para implementar ferramentas de segurança e evoluir o DevOps para o DevSecOps, aumentar a cultura das equipes com os aspectos de segurança e trazer para o conhecimento de todos os envolvidos nesse processo, qual a importância de nos preocuparmos com a cadeia de suprimentos e dependências dos nossos códigos, realizar testes recorrentes enquanto o software está sendo construído, ainda na fase estática e mais preocupado com o código em si e posteriormente quando começa se tornar funcional e podemos realizar testes dinâmicos, encontrando e trazendo para a superfície, problemas que podem rapidamente serem corrigidos ou riscos que devem ser endereçados para a melhor tratativa. ",
    "url": "/guiassdlc/docs/implementation.html",
    
    "relUrl": "/docs/implementation.html"
  },"8": {
    "doc": "Resposta à Incidentes",
    "title": "Resposta à Incidentes",
    "content": "A ideia de “produto final” após a entrega no ambiente produtivo não combina com o modelo DevOps e o DevSecOps, proposto aqui com as introduções de ferramentas e processos de Segurança, portanto é preciso entender que os produtos construídos sob essa cultura, estão sempre em evolução e quanto mais trabalhamos neles mais buscamos uma melhoria, seja para o viés tecnológico, de negócio, segurança, correção de bugs ou vulnerabilidades ou até mesmo para atender às mudanças de leis e regulamentações. Contudo, somente ter a melhoria contínua acompanhando a evolução do produto, não é suficiente para atender todos os aspectos do sistema, junto dele devemos também construir um processo padrão de resposta à incidentes, pois é crucial que o tenhamos para endereçar novas ameaças que surgem com o tempo. Esse processo deve seguir as orientações do time de Resposta à Incidentes da Corporação ou ser criado em conjunto com esse time. Nesse plano devemos incluir os contatos que devem ser acionados em momentos de crise, protocolos de segurança que devem ser adotados e seguidos, o processo de abertura, tratamento e finalização de uma crise, além de ser testado antes de ser necessária à sua utilização. O melhor de criar um plano de resposta a incidentes e um processo de melhoria contínua, é que criamos uma cultura que visa a solução dos problemas, sejam eles oriundos de pessoas, processos ou tecnologias, paramos de ‘apontar dedos’ e buscar culpados e passamos a focar na busca de soluções, o que permite alcançar uma melhoria constante dos profissionais e processos utilizados na construção dos sistemas e do ecossistema existente dentro das corporações. ",
    "url": "/guiassdlc/docs/incidentresponse.html",
    
    "relUrl": "/docs/incidentresponse.html"
  },"9": {
    "doc": "Introdução",
    "title": "Introdução",
    "content": "Desenvolvimento de Software não é uma matéria nova, e ao longo dos anos evoluiu em todos os seus aspectos, metodologias e formas de gerenciamento, cada um deles atendendo às necessidades de sua época ou da razão pela qual foi criado. Atualmente Agile é a metodologia mais difundida e utilizada pelas empresas, pela necessidade de acompanhar as mudanças e a velocidade com que elas acontecem, sendo assim tivemos que adequar a maneira como entregamos os softwares e sistemas criados para e por empresas que deles se utilizam, para entregar seus serviços, produtos e valor ao cliente. A tecnologia não só mudou a maneira como os softwares são criados como também a maneira como os negócios acontecem, sendo assim a maioria deles migraram seus processos e produtos para meios tecnológicos, tornando-se essencial que os softwares de fornecedores ou proprietários abordem as ameaças à segurança desde a sua concepção. Para a abordagem dos aspectos de segurança, temos modelos de SDLCs, waterfall, spiral, agile, DevOps, que auxiliam nessa função e que possibilitam a inserção de processos e ferramentas voltados para segurança, em cada fase do desenvolvimento de software. Implementar uma Esteira de Desenvolvimento Seguro (SSDLC) não é uma tarefa trivial, principalmente em ambientes que já possuem sistemas legados e precisam se adaptar às novas necessidade e princípios, tais como security by design e security by default, elementos que fornecem as maiores vantagens de segurança, buscando mitigar a introdução de vulnerabilidades e diminuir a exposição da superfície de ataque, respectivamente. Para entender um pouco mais como funciona uma Esteira de Desenvolvimento Seguro, abordaremos 3 fases do desenvolvimento, sendo elas: Educação/Conscientização, Tecnologias/Processos e Melhoria Contínua; dentro dessas fases abordaremos as 7 etapas existentes dentro da esteira, sendo: treinamento de código seguro, levantamento de requisitos, modelagem (design), implementação, verificação, lançamento (release) e melhoria contínua. Ao término dessas etapas, tentaremos elucidar os ganhos e dificuldades de se implementar uma SSDLC e como podemos evoluir o assunto dentro das empresas, fortalecendo seus sistemas e mitigando os riscos. Quanto mais empresas abordarem este assunto e entenderem sua importância no cenário atual, não somente seu ambiente se torna menos vulnerável e mais seguro, como também contribui para uma comunidade cada vez mais ciente dos riscos existentes, de como podem abordá-los e mitigá-los, inclusive transformando cada vez mais profissionais em agentes conscientes de suas responsabilidades, pois a segurança só pode ser alcançada quando todos entendem que fazem parte e tem um papel fundamental neste ecossistema. ",
    "url": "/guiassdlc/docs/introduction.html",
    
    "relUrl": "/docs/introduction.html"
  },"10": {
    "doc": "Levantamento de Requisitos",
    "title": "Levantamento de Requisitos",
    "content": "Esta é a fase que oferece a melhor oportunidade para a construção de softwares seguros, pois é nela que a equipe de produto e software podem envolver seu ponto de contato de segurança, por vezes chamado de AppSec, e receber as orientações e fazer as pesquisas necessárias enquanto ainda planejam o produto, definem seus fluxos, tecnologias que serão utilizadas e a sua arquitetura. O Appsec irá acompanhar o desenrolar do projeto desde o início, aconselhando as equipes sobre as melhores práticas, leis e regulamentações que devem ser atendidas, as features que precisam ser implementadas para apoiar as tecnologias utilizadas e definir junto ao time os aceites de qualidade de Segurança, para que os riscos identificados sejam sanados ou mitigados, diminuindo a exposição do produto e eliminando possíveis vulnerabilidades que poderiam surgir durante o desenvolvimento. Em contrapartida, nesse momento as equipes técnicas e de produto podem considerar qual a melhor maneira de incluir os objetivos de segurança em seu produto, durante todo o processo de desenvolvimento, inclusive nas integrações com outros produtos ou sistemas, elencar as possíveis implicações técnicas e de governança. Como resultado desse levantamento, aconselhamento e indicações, teremos uma equipe de produto mais consciente das necessidades de segurança, governança e compliance, com autonomia para definir a melhor maneira de endereçar esses requisitos de segurança, inclusive com o recebimento de um documento contendo os riscos e recomendações do Appsec, através da Modelagem de Ameaças, criada na fase de Design, com o intuito de que nenhum requisito seja desconsiderado, esquecido ou estabelecido na última hora. ",
    "url": "/guiassdlc/docs/lev_reqs.html",
    
    "relUrl": "/docs/lev_reqs.html"
  },"11": {
    "doc": "Executando Pentest",
    "title": "Executando Pentest",
    "content": "Com os levantamentos em mãos, os riscos de segurança endereçados e os testes automatizados realizados, ainda temos o lado humano que não conseguimos remover, que é o entendimento dos fluxos de negócio e a tentativa de quebrá-los, subverter essas lógicas ou inverter os fluxos propostos, tudo isso fazemos através do Pentest. O teste de intrusão - penetration test (Pentest) - \"busca detectar de forma minuciosa através de técnicas utilizadas pelos especialistas em segurança (ofensiva ou Appsec), visando encontrar potenciais vulnerabilidades no sistema em questão, seja um serviço web, API, mobile ou infraestrutura, utilizando ferramentas e técnicas específicas que possam provar em seus resultados que os dados ou informações da corporação estão expostas\" ou com risco elevado de serem utilizados de forma incorreta e até criminosa. Temos algumas formas de realizar esses testes, comumente chamadas de testes blackbox, graybox e whitebox, como os nomes sugerem, ao realizar um teste blackbox, nós não possuímos muita informação sobre a superfície que será testada, muitas vezes resumidas ao endereço IP ou endpoint, no outro lado temos os testes do tipo WhiteBox, que já nos dão diversas informações, documentações e algumas vezes explicações dos fluxos, features e arquitetura, facilitando as descobertas e sobre o que estamos tratando; entre estes extremos temos o GrayBox que é um misto dos anteriores, onde não temos tanta informação quanto no white e nem tão limitado quanto um blackbox. É através desses testes que conseguimos validar se as ameaças endereçadas no levantamento de requisitos e modelagem de ameaça foram corrigidas ou evitadas ou se conseguimos materializar o risco apontado, transformando-o assim em uma vulnerabilidade nesse sistema. Isso permite que os times envolvidos na criação conheçam melhor suas fraquezas, onde precisam melhorar e diminuem as possibilidades de ataque ou vazamento, quando essa feature ou sistema chegar no ambiente produtivo. Ao detectar as vulnerabilidades, geramos um relatório contendo as evidências e explicações de como foi possível materializar o risco e explorar a vulnerabilidade citada. Após esta atividade ser finalizada pelo especialista que está conduzindo o teste, iniciamos o processo de Gestão de vulnerabilidades, onde informamos aos times e todos os responsáveis, para que todas as pessoas estejam cientes e possam endereçar para quem é de direito, criar uma correção (patch) ou buscar formas de contornar e mitigar o risco; em última instância, podemos assumir esse risco por diversos aspectos, por exemplo, a remediação ser mais cara que a perda resultante do abuso dessa vulnerabilidade, negócio entender que não é uma prioridade a correção, alta gestão assumir o risco e seguir com a vulnerabilidade, entre outras inúmeras possibilidades que podem acontecer, apesar de que o melhor caminho é sempre corrigir a vulnerabilidade, pois dessa forma garantimos que esse vetor não será utilizado para prejudicar a corporação em uma escala menor ou maior. Indiferente da decisão que venha a ser tomada, o especialista realiza todo o acompanhamento da vulnerabilidade, desde a descoberta até o fechamento dela através de retestes, onde podemos validar que as ações de correção surtiram o efeito desejado e sanaram o problemas ou que as barreiras mitigatórias diminuíram o impacto ou criaram uma barreira suficiente para que a vulnerabilidade não seja explorada da maneira identificada, apesar de continuar existindo e podendo ser explorada de outras formas. Durante todo o ciclo de desenvolvimento nós buscamos ferramentas e processos que nos auxiliem na escala de testes, onde conseguimos de certa forma acompanhar a evolução do desenvolvimento e finalizar com os testes de intrusão por meio do especialista, o que nos permite propagar sempre a cultura de construção de sistemas mais seguros e a correção precoce dos riscos encontrados, através de uma gestão eficiente e próxima de todos os participantes desse desenvolvimento. ",
    "url": "/guiassdlc/docs/pentest.html",
    
    "relUrl": "/docs/pentest.html"
  },"12": {
    "doc": "Referências",
    "title": "Referências",
    "content": "Todas as referências listadas neste documento foram utilizadas como base de estudo e criação deste guia, além de praticadas em atividades realizadas em ambientes que utilizam uma esteira de desenvolvimento seguro. Curso . | GoHacking Secure Coding and DevSecOps | . Podcast . | AppSec to Go: Conviso Application Security . | DevSecOps . | . Bibliografia . | NIST - Mitigating the Risk of Software Vulnerabilities by Adopting a Secure Software Development Framework (SSDF) . | OWASP - Code Review Guide_v2 . | Microsoft Press - The Security Development Lifecycle . | CSSLP Certification All-in-one Exam Guide - McGraw-Hill Education; 2nd ed. edição (15 março 2019) . | . Links de Referência . 1 - OWASP Application Security Verification Standard . 2 - Ciclo de vida do desenvolvimento da segurança de computação confiável . 3 - SDL da Microsoft . 4 - Exemplos de ameaças no Threat Modeling . 5 - Cripto-recommendations . 6 - Palestra BlackHat . 7 - BSA Framework for Secure Software . 8 - SAFECode Tactical Threat Modeling . 9 - SAFECode Fundamental Practices . 10 - Security Champiom . 12 - Plataformas de treinamento de Segurança: . | Secure Code Warrior . | Avatao . | Remediatetheflag . | Secureflag . | Checkmarx try-codebashing . | Application.security . | TryHackMe . | HackTheBox Academy . | Appsec Engineer . | . 13 - Threat Modeling Manifesto . 14 - Modelo DREAD . 15 - Modelo STRIDE . 16 - OWASP Threat Dragon . 17 - Pentest . 18 - DevSecOps . Playlists: . Playlist 1 . Playlist 2 . ",
    "url": "/guiassdlc/docs/references.html",
    
    "relUrl": "/docs/references.html"
  },"13": {
    "doc": "Tecnologia e Processos",
    "title": "Tecnologia e Processos",
    "content": " ",
    "url": "/guiassdlc/docs/techprocess.html",
    
    "relUrl": "/docs/techprocess.html"
  }
}
